import { useState, useEffect, useRef } from 'react';
import Breadcrumb from '../components/common/Breadcrumb';
import personImage1 from '../assets/images/contact-page-hero-section-person-images/person1.jpg';
import personImage2 from '../assets/images/contact-page-hero-section-person-images/person2.jpg';
import personImage3 from '../assets/images/contact-page-hero-section-person-images/person3.jpg';
import personImage4 from '../assets/images/contact-page-hero-section-person-images/person4.jpg';
import personImage5 from '../assets/images/contact-page-hero-section-person-images/person5.jpg';
import personImage6 from '../assets/images/contact-page-hero-section-person-images/person6.jpg';
import leafImage from '../assets/images/leaf-2.png';
import leaf1Image from '../assets/images/leaf1.png';
import { API_ENDPOINTS } from '../config/api';
import { motion, AnimatePresence } from 'framer-motion';

// Custom hook for scroll animations using Intersection Observer
const useScrollAnimation = (options = {}) => {
  const [isVisible, setIsVisible] = useState(false);
  const ref = useRef(null);

  useEffect(() => {
    const observer = new IntersectionObserver(([entry]) => {
      if (entry.isIntersecting) {
        setIsVisible(true);
        // Once visible, we can unobserve the element
        if (ref.current) observer.unobserve(ref.current);
      }
    }, {
      threshold: options.threshold || 0.1,
      rootMargin: options.rootMargin || '0px'
    });
    
    const currentRef = ref.current;
    if (currentRef) {
      observer.observe(currentRef);
    }
    
    return () => {
      if (currentRef) {
        observer.unobserve(currentRef);
      }
    };
  }, [options.threshold, options.rootMargin]);
  
  return [ref, isVisible];
};

// Parallax scroll effect hook
const useParallaxScroll = (speed = 0.5) => {
  const [offset, setOffset] = useState(0);
  const ref = useRef(null);
  
  useEffect(() => {
    const handleScroll = () => {
      if (!ref.current) return;
      
      const { top } = ref.current.getBoundingClientRect();
      const scrollOffset = window.scrollY;
      const elementPositionRelativeToViewport = top + scrollOffset;
      const scrollPosition = scrollOffset;
      const relativeScroll = scrollPosition - elementPositionRelativeToViewport;
      
      setOffset(relativeScroll * speed);
    };
    
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, [speed]);
  
  return [ref, offset];
};

const Contact = () => {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    subject: 'Question',
    message: ''
  });
  
  const [formStatus, setFormStatus] = useState({
    submitted: false,
    success: false,
    message: ''
  });

  const [formErrors, setFormErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  const [scrolled, setScrolled] = useState(false);
  const [loaded, setLoaded] = useState(false);
  
  // State for FAQ accordion
  const [activeAccordion, setActiveAccordion] = useState(null);
  
  // Refs and animation states for scroll animations
  const [contactSectionRef, contactSectionVisible] = useScrollAnimation({ threshold: 0.1 });
  const [card1Ref, card1Visible] = useScrollAnimation({ threshold: 0.1, rootMargin: '0px 0px -50px 0px' });
  const [card2Ref, card2Visible] = useScrollAnimation({ threshold: 0.1, rootMargin: '0px 0px -50px 0px' });
  const [card3Ref, card3Visible] = useScrollAnimation({ threshold: 0.1, rootMargin: '0px 0px -50px 0px' });
  const [mapSectionRef, mapSectionVisible] = useScrollAnimation({ threshold: 0.1 });
  const [faqSectionRef, faqSectionVisible] = useScrollAnimation({ threshold: 0.1 });
  const [formSectionRef, formSectionVisible] = useScrollAnimation({ threshold: 0.1 });
  
  const [confetti, setConfetti] = useState(false);
  const buttonRef = useRef(null);
  
  // Adding more refs and animation states for scroll animations
  const [heroImageRef, heroImageVisible] = useScrollAnimation({ threshold: 0.1 });
  const [socialProofRef, socialProofVisible] = useScrollAnimation({ threshold: 0.1 });
  const [heroLeafRef, leafOffset] = useParallaxScroll(0.1);
  const [formSectionLeafRef, formLeafOffset] = useParallaxScroll(0.15);
  const [faqLeafRef, faqLeafOffset] = useParallaxScroll(0.12);
  
  // Toggle accordion state
  const toggleAccordion = (index) => {
    if (activeAccordion === index) {
      setActiveAccordion(null);
    } else {
      setActiveAccordion(index);
    }
  };

  useEffect(() => {
    const handleScroll = () => {
      setScrolled(window.scrollY > 50);
    };
    
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  useEffect(() => {
    // Trigger entrance animations after component mounts
    setLoaded(true);
  }, []);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prevData => ({
      ...prevData,
      [name]: value
    }));
    
    // Clear error for this field when user types
    if (formErrors[name]) {
      setFormErrors({
        ...formErrors,
        [name]: ''
      });
    }
  };

  const validateForm = () => {
    let errors = {};
    let isValid = true;
    
    // Validate name
    if (!formData.name.trim()) {
      errors.name = 'Name is required';
      isValid = false;
    }
    
    // Validate email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!formData.email.trim()) {
      errors.email = 'Email is required';
      isValid = false;
    } else if (!emailRegex.test(formData.email)) {
      errors.email = 'Please enter a valid email address';
      isValid = false;
    }
    
    // Validate message
    if (!formData.message.trim()) {
      errors.message = 'Message is required';
      isValid = false;
    } else if (formData.message.trim().length < 10) {
      errors.message = 'Message must be at least 10 characters';
      isValid = false;
    }
    
    setFormErrors(errors);
    return isValid;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }
    
    setIsSubmitting(true);
    
    try {
      // Make API call to backend
      const response = await fetch(API_ENDPOINTS.CONTACT, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: formData.name,
          email: formData.email,
          subject: formData.subject,
          message: formData.message,
          phone: formData.phone || null, // Optional field
        }),
      });

      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.message || 'Failed to submit contact form');
      }
      
      // Trigger confetti animation on success
      setConfetti(true);
      
      // Successful submission
      setFormStatus({
        submitted: true,
        success: true,
        message: data.message || 'Thank you for your message! We will get back to you soon.'
      });
    
      // Reset form
      setFormData({
        name: '',
        email: '',
        phone: '',
        subject: 'Question',
        message: ''
      });
      
      // Scroll to success message with smooth animation
      setTimeout(() => {
        window.scrollTo({
          top: document.getElementById('contact-form').offsetTop - 100,
          behavior: 'smooth'
        });
      }, 800);
      
    } catch (error) {
      console.error('Contact form submission error:', error);
      setFormStatus({
        submitted: true,
        success: false,
        message: error.message || 'Something went wrong. Please try again later.'
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  // Reset confetti after animation
  useEffect(() => {
    if (confetti) {
      const timer = setTimeout(() => {
        setConfetti(false);
      }, 5000);
      
      return () => clearTimeout(timer);
    }
  }, [confetti]);

  const breadcrumbItems = [
    { label: 'Home', path: '/' },
    { label: 'Contact Us', path: '/contact' }
  ];

  return (
    <div className="min-h-screen bg-[#f8f6f3]">
      {/* Inject Google Fonts */}
      <style>
        {`
          @import url('https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;500;600;700&family=Poppins:wght@300;400;500;600;700&family=Cormorant+Garamond:wght@400;500;600;700&display=swap');
        `}
      </style>

      {/* Modern Hero Section with premium styling */}
      <div className={`relative transition-all duration-700 ease-out ${loaded ? 'opacity-100' : 'opacity-0 translate-y-10'}`}>
        {/* Premium gradient background with texture */}
        <div className="absolute inset-0 bg-gradient-to-br from-[#f8f6f3] via-[#f1efe9] to-[#e8e4d9] opacity-70"></div>
        <div 
          className="absolute inset-0 opacity-20"
          style={{
            backgroundImage: `url("data:image/svg+xml,%3Csvg width='30' height='30' viewBox='0 0 30 30' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M15 0C6.716 0 0 6.716 0 15c0 8.284 6.716 15 15 15 8.284 0 15-6.716 15-15 0-8.284-6.716-15-15-15zm0 1.5c7.444 0 13.5 6.056 13.5 13.5 0 7.444-6.056 13.5-13.5 13.5-7.444 0-13.5-6.056-13.5-13.5 0-7.444 6.056-13.5 13.5-13.5z' fill='%234D7C0F' fill-opacity='0.05' fill-rule='evenodd'/%3E%3C/svg%3E")`
          }}
        ></div>
      
        {/* Decorative monstera leaf with enhanced parallax */}
        <div 
          ref={heroLeafRef} 
          className="absolute top-0 right-0 w-96 h-96 pointer-events-none z-0 overflow-hidden opacity-25 transition-transform duration-1000 ease-out"
          style={{ transform: `translate(25%, -25%) translateY(${leafOffset * 0.5}px) rotate(${scrolled ? '5deg' : '0deg'})` }}
        >
          <img 
            src={leaf1Image} 
            alt="" 
            className="w-full h-full object-contain filter drop-shadow-lg"
          />
        </div>
        
        {/* Content container with premium styling */}
        <div className={`relative z-10 max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 pt-24 pb-20 transition-all duration-500 ${scrolled ? 'transform -translate-y-4' : ''}`}>
          {/* Breadcrumb navigation with refined styling */}
          <div className="mb-8">
            <nav className="flex" aria-label="Breadcrumb">
              <ol className="inline-flex items-center space-x-1 md:space-x-3">
                <li className="inline-flex items-center">
                  <a href="/" className="text-[#4D7C0F] hover:text-green-800 text-sm font-medium transition-colors">
                    Home
                  </a>
                </li>
                <li>
                  <div className="flex items-center">
                    <svg className="w-4 h-4 text-[#6B7280]" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                      <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd"></path>
                    </svg>
                    <span className="ml-1 text-sm font-medium text-[#6B7280] md:ml-2">Contact</span>
                  </div>
                </li>
              </ol>
            </nav>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
            {/* Left column - Hero content with premium typography */}
            <div className={`transition-all duration-700 delay-300 ${loaded ? 'opacity-100 translate-x-0' : 'opacity-0 -translate-x-10'}`}>
              <div className="inline-block px-3 py-1 rounded-full bg-gradient-to-r from-[#4D7C0F] to-[#65a30d] text-white text-xs font-semibold mb-4 shadow-sm">
                Get in Touch
              </div>
              
              <h1 className="text-3xl md:text-4xl lg:text-5xl font-bold text-[#1F2937] leading-tight mb-6 transition-all duration-500 serif-heading">
                Let's Start a <span className="bg-gradient-to-r from-[#4D7C0F] to-[#65a30d] bg-clip-text text-transparent relative overflow-hidden group">
                  <span className="inline-block transition-transform duration-300 group-hover:transform group-hover:-translate-y-1">Conversation</span>
                  <span className="absolute bottom-0 left-0 w-full h-0.5 bg-gradient-to-r from-[#4D7C0F] to-[#65a30d] transform scale-x-0 transition-transform duration-300 group-hover:scale-x-100 origin-left"></span>
                </span>
              </h1>
              
              <p className="text-base md:text-lg text-[#6B7280] mb-8 max-w-xl leading-relaxed sans-text">
                Have questions about our organic products or farming practices? We're here to help you connect with truly sustainable farming.
              </p>
              
              <div className="flex flex-wrap gap-4 mb-6">
                <motion.a 
                  href="#contact-form" 
                  className="inline-flex items-center justify-center bg-gradient-to-r from-[#4D7C0F] to-[#65a30d] text-white font-medium py-3 px-8 rounded-md transition-all duration-300 shadow-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transform hover:-translate-y-1 hover:shadow-lg active:translate-y-0 backdrop-filter backdrop-blur-sm"
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <span>Send Us a Message</span>
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14 5l7 7m0 0l-7 7m7-7H3" />
                  </svg>
                </motion.a>
                
                <motion.a 
                  href="#why-organic" 
                  className="inline-flex items-center justify-center bg-white border border-[#E5E7EB] text-[#4D7C0F] hover:bg-[#ECFDF5] font-medium py-3 px-8 rounded-md transition-all duration-300 shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transform hover:-translate-y-1 hover:shadow-md active:translate-y-0 backdrop-filter backdrop-blur-sm"
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <span>Learn More</span>
                </motion.a>
              </div>
              
              {/* Social proof with enhanced styling */}
              <div 
                ref={socialProofRef}
                className={`mt-10 pt-6 border-t border-[#E5E7EB] transition-all duration-700 delay-500 ease-out transform ${socialProofVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'}`}
              >
                <p className="mb-3 text-sm font-medium bg-gradient-to-r from-[#4D7C0F] to-[#65a30d] bg-clip-text text-transparent">Trusted by Organic Enthusiasts</p>
                <div className="flex -space-x-3">
                  {[
                    { img: personImage1, alt: "Client testimonial" },
                    { img: personImage2, alt: "Client testimonial" },
                    { img: personImage3, alt: "Client testimonial" },
                    { img: personImage4, alt: "Client testimonial" },
                    { img: personImage5, alt: "Client testimonial" }
                  ].map((person, i) => (
                    <motion.div 
                      key={i} 
                      className={`w-12 h-12 md:w-14 md:h-14 rounded-full border-2 border-white overflow-hidden shadow-sm transition-all duration-300 hover:scale-110 hover:translate-y-[-5px] hover:z-10 hover:shadow-md cursor-pointer`}
                      initial={{ opacity: 0, x: -20 }}
                      animate={socialProofVisible ? { opacity: 1, x: 0 } : { opacity: 0, x: -20 }}
                      transition={{ duration: 0.3, delay: i * 0.1 + 0.2 }}
                    >
                      <img 
                        src={person.img} 
                        alt={person.alt} 
                        className="w-full h-full object-cover"
                      />
                    </motion.div>
                  ))}
                </div>
                <motion.p 
                  className="mt-3 text-[#6B7280] text-sm italic accent-text"
                  initial={{ opacity: 0 }}
                  animate={socialProofVisible ? { opacity: 1 } : { opacity: 0 }}
                  transition={{ duration: 0.5, delay: 0.8 }}
                >
                  "Their commitment to sustainable farming practices and exceptional customer service sets them apart in the organic market."
                </motion.p>
              </div>
            </div>
            
            {/* Right column - Hero card with glass effect */}
            <div 
              ref={heroImageRef}
              className={`relative h-full flex items-center justify-center p-4 transition-all duration-700 transform ${loaded ? 'opacity-100 translate-x-0' : 'opacity-0 translate-x-10'} ${heroImageVisible ? 'scale-100' : 'scale-95'}`}
            >
              <motion.div 
                className="relative w-full max-w-md h-80 lg:h-96 rounded-2xl overflow-hidden shadow-2xl transform transition-all duration-500 hover:shadow-2xl hover:scale-105"
                initial={{ y: 30, opacity: 0 }}
                animate={heroImageVisible ? { y: 0, opacity: 1 } : { y: 30, opacity: 0 }}
                transition={{ duration: 0.7, delay: 0.3, ease: "easeOut" }}
              >
                {/* Gradient background */}
                <div className="absolute inset-0 bg-gradient-to-br from-[#f8f6f3] to-[#e8e4d9] opacity-90"></div>
                
                {/* Glass effect overlay */}
                <div className="absolute inset-0 backdrop-filter backdrop-blur-sm bg-white bg-opacity-20 border border-white border-opacity-20"></div>
                
                <div className="absolute top-0 left-0 w-full h-full flex flex-col items-center justify-center p-8 text-center z-10">
                  <motion.div 
                    className="w-20 h-20 mb-6 rounded-full bg-gradient-to-br from-[#4D7C0F] to-[#65a30d] flex items-center justify-center transition-transform duration-500 hover:rotate-12 shadow-lg"
                    animate={{ y: [0, -10, 0] }}
                    transition={{ duration: 2, repeat: Infinity, ease: "easeInOut" }}
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                    </svg>
                  </motion.div>
                  <motion.h2 
                    className="text-2xl font-bold text-[#1F2937] mb-2 serif-heading"
                    initial={{ opacity: 0 }}
                    animate={heroImageVisible ? { opacity: 1 } : { opacity: 0 }}
                    transition={{ delay: 0.5, duration: 0.5 }}
                  >
                    Reach Out To Us
                  </motion.h2>
                  <motion.p 
                    className="text-[#6B7280] mb-4 sans-text"
                    initial={{ opacity: 0 }}
                    animate={heroImageVisible ? { opacity: 1 } : { opacity: 0 }}
                    transition={{ delay: 0.7, duration: 0.5 }}
                  >
                    We're excited to hear from you about our organic products
                  </motion.p>
                  <motion.span 
                    className="inline-block px-4 py-2 bg-gradient-to-r from-[#4D7C0F] to-[#65a30d] text-white rounded-full text-sm font-semibold hover:bg-green-800 transition-colors duration-300 cursor-pointer transform hover:scale-105 active:scale-95 shadow-md"
                    initial={{ opacity: 0, y: 20 }}
                    animate={heroImageVisible ? { opacity: 1, y: 0 } : { opacity: 0, y: 20 }}
                    transition={{ delay: 0.9, duration: 0.5 }}
                    whileHover={{ scale: 1.05, boxShadow: "0 4px 8px rgba(0,0,0,0.1)" }}
                    whileTap={{ scale: 0.95 }}
                  >
                    Response within 24 hours
                  </motion.span>
                </div>
              </motion.div>
            </div>
          </div>
        </div>
      </div>

      {/* Contact Form Section - Glass morphism with premium styling */}
      <div id="contact-form" ref={formSectionRef} className="py-20 bg-white relative overflow-hidden">
        {/* Rest of the component implementation... */}
      </div>

      {/* Contact Information Section - Additional sections... */}

      {/* FAQ section - Enhanced with glass morphism and premium effects */}
      <div ref={faqSectionRef} className="py-20 bg-white relative overflow-hidden">
        {/* Rest of the implementation... */}
      </div>
    </div>
  );
};

// Add animation and styling
const style = document.createElement('style');
style.textContent = `
  /* Font Styling */
  h1, h2, h3, h4, .serif-heading {
    font-family: 'Playfair Display', serif;
  }
  
  body, p, input, button, select, textarea, .sans-text {
    font-family: 'Poppins', sans-serif;
  }
  
  .accent-text {
    font-family: 'Cormorant Garamond', serif;
  }
  
  /* Enhanced Animations */
  @keyframes blob {
    0% {
      transform: translate(0px, 0px) scale(1);
    }
    33% {
      transform: translate(30px, -50px) scale(1.1);
    }
    66% {
      transform: translate(-20px, 20px) scale(0.9);
    }
    100% {
      transform: translate(0px, 0px) scale(1);
    }
  }
  
  .animate-blob {
    animation: blob 7s infinite;
  }
  
  @keyframes pulse {
    0%, 100% {
      opacity: 1;
    }
    50% {
      opacity: 0.8;
    }
  }
  
  .animate-pulse {
    animation: pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }
  
  @keyframes bounce {
    0%, 100% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-10px);
    }
  }
  
  .animate-bounce {
    animation: bounce 2s infinite;
  }
  
  @keyframes float {
    0% {
      transform: translateY(0px) rotate(0deg);
    }
    50% {
      transform: translateY(-20px) rotate(4deg);
    }
    100% {
      transform: translateY(0px) rotate(0deg);
    }
  }
  
  .animate-float {
    animation: float 15s ease-in-out infinite;
  }
  
  .animation-delay-2000 {
    animation-delay: 2s;
  }
  
  .animation-delay-4000 {
    animation-delay: 4s;
  }
  
  /* Create a gradient border effect */
  .border-gradient-to-b {
    border-image: linear-gradient(to bottom, #4D7C0F, #65a30d) 1;
  }
`;
document.head.appendChild(style);

export default Contact; 